LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
<?

   entityName := "BlockRam_D"+elem.Bits+"A"+elem.AddrBits;
   maskBits   := elem.Bits / 8;

?>
entity <?=entityName?> is
  port (
    D: out std_logic_vector (<?=elem.Bits-1?> downto 0);
    A: in std_logic_vector (<?=elem.AddrBits-1?> downto 0);
    Din: in std_logic_vector (<?=elem.Bits-1?> downto 0);
    str: in <?
      if (maskBits=1) {
        print("std_logic;");
      } else {
        print("std_logic_vector ("+(maskBits-1)+" downto 0);");
      } ?>
    C: in std_logic );
end <?=entityName?>;

architecture Behavioral of <?=entityName?> is
    type memoryType is array(0 to <?=(1<<elem.AddrBits)-1?>) of std_logic_vector(<?=elem.Bits-1?> downto 0);
    signal memory : memoryType;
    signal rData : std_logic_vector (<?=elem.Bits-1?> downto 0) := (others => '0');
begin
  process ( C )
  begin
    if rising_edge(C) then
      rData <= memory(to_integer(unsigned(A)));
      <? if (maskBits=1) { ?>
      if str='1' then
        memory(to_integer(unsigned(A))) <= Din;
      end if;
      <? } else {
          for (i:=0;i<maskBits;i++) {
      ?>
      if str(<?=i?>)='1' then
        memory(to_integer(unsigned(A)))(<?=i*8+7?> downto <?=i*8?>) <= Din(<?=i*8+7?> downto <?=i*8?>);
      end if;
      <?
          }
        } ?>
    end if;
  end process;
  D <= rData;
end Behavioral;
